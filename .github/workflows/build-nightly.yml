name: Build Eden Nightly
concurrency:
  group: build-eden-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch: {}
  push:
    branches: [main]

jobs:
  info:
    runs-on: ubuntu-latest
    name: 'Get info'
    strategy:
      matrix:
        target: [Info]
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false

      - name: Get the latest release count
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          api_url="https://api.github.com/repos/${{ github.repository }}"
          latest_release_info=$(curl -H "Authorization: token $GH_TOKEN" "$api_url/releases/latest")
          last_release_tag=$(echo "$latest_release_info" | jq -r '.tag_name')
          echo "${last_release_tag}"
          old_count="${last_release_tag##*-}"
          echo "OLD_COUNT=$old_count" >> "$GITHUB_ENV"

      - name: Generate changelog
        run: |
          chmod +x ./changelog.sh
          ./changelog.sh

      - name: Upload tag file
        uses: actions/upload-artifact@v4.6.2
        with:
          name: tag
          path: ~/tag

      - name: Upload count file
        uses: actions/upload-artifact@v4.6.2
        with:
          name: count
          path: ~/count

      - name: Upload changelog file
        uses: actions/upload-artifact@v4.6.2
        with:
          name: changelog
          path: ~/changelog

      - name: Upload source code
        uses: actions/upload-artifact@v4.6.2
        with:
          name: source
          path: artifacts

  windows:
    runs-on: windows-latest
    name: 'Windows (${{ matrix.target }})'
    continue-on-error: true
    strategy:
      matrix:
        include:
          - target: x86_64
            arch: x86_64
            qt_arch: win64_msvc2022_64
    env:
      TARGET: ${{ matrix.target }}
      ARCH: ${{ matrix.arch }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.target }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.9.1'
          host: 'windows'
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          modules: qtmultimedia qt5compat

      - name: Install vulkan-sdk
        shell: bash
        run: |
          choco install wget ccache -y --no-progress
          mkdir -p D:/a/_temp
          VULKAN_URL="https://sdk.lunarg.com/sdk/download/1.4.313.1/windows/vulkansdk-windows-X64-1.4.313.1.exe"
          wget -q --retry-connrefused --tries=10 "$VULKAN_URL" -O D:/a/_temp/vulkan.exe
          D:/a/_temp/vulkan.exe --accept-licenses --default-answer --confirm-command install
          echo "VULKAN_SDK=C:/VulkanSDK/1.4.313.1" >> $GITHUB_ENV
          echo "PATH=C:/VulkanSDK/1.4.313.1/Bin:$PATH" >> $GITHUB_ENV

      - name: Pull Eden with submodules
        shell: bash
        run: |
          git config --global user.name "Auto Bot"
          git config --global user.email "bot@example.com"
          if ! git clone 'https://git.eden-emu.dev/eden-emu/eden.git' ./eden; then
            echo "Using mirror instead..."
            rm -rf ./eden || true
            git clone 'https://github.com/pflyly/eden-mirror.git' ./eden
          fi
          cd ./eden
          git apply ../patches/*.patch --verbose
          git submodule update --init --recursive
          echo "VERSION=$(git rev-list --count HEAD)" >> "${GITHUB_ENV}"

      - name: Restore vcpkg cache for ${{ matrix.target }}
        uses: actions/cache/restore@v4
        id: restore-vcpkg-cache
        with:
          path: |
            ${{ github.workspace }}/eden/build/vcpkg_installed
            ${{ github.workspace }}/eden/build/externals
            ${{ github.workspace }}/eden/.vcpkg
          key: ${{ runner.os }}-vcpkg-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.target }}-

      - name: Restore ccache for ${{ matrix.target }}
        uses: actions/cache/restore@v4
        id: restore-ccache-cache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.target }}-

      - name: Compile Eden Windows ${{ matrix.target }}
        shell: bash
        run: |
          chmod +x ./eden-windows.sh
          ./eden-windows.sh

      - name: Generate installer for ${{ matrix.target }}
        shell: cmd
        run: |
          cd installer
          "C:\Program Files (x86)\NSIS\makensis.exe" /DPRODUCT_VARIANT=${{ matrix.arch }} /DPRODUCT_VERSION=${{ env.VERSION }} eden.nsi
          mkdir artifacts 2>nul
          move /y *.exe artifacts\

      - name: Upload Eden 7z ${{ matrix.target }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: eden-windows-7z-${{ matrix.target }}
          path: eden/build/artifacts/

      - name: Save vcpkg cache for ${{ matrix.target }}
        if: ${{ github.ref_name == 'main' }}
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ github.workspace }}/eden/build/vcpkg_installed
            ${{ github.workspace }}/eden/build/externals
            ${{ github.workspace }}/eden/.vcpkg
          key: ${{ steps.restore-vcpkg-cache.outputs.cache-primary-key }}

      - name: Save ccache for ${{ matrix.target }}
        if: ${{ github.ref_name == 'main' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

  release:
    name: 'release'
    if: ${{ github.ref_name == 'main' }}
    needs: [info, windows]
    permissions:
      actions: read
      security-events: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.3.0
        with:
          name: eden-windows-7z-x86_64

      - uses: actions/download-artifact@v4.3.0
        with:
          name: tag

      - uses: actions/download-artifact@v4.3.0
        with:
          name: count

      - uses: actions/download-artifact@v4.3.0
        with:
          name: changelog

      - uses: actions/download-artifact@v4.3.0
        with:
          name: source

      - name: Generate changelog
        run: |
          echo "TAG=$(cat tag)" >> "${GITHUB_ENV}"
          echo "COUNT=$(cat count)" >> "${GITHUB_ENV}"
          echo "BODY<<EOF" >> "${GITHUB_ENV}"
          cat changelog >> "${GITHUB_ENV}"
          echo "EOF" >> "${GITHUB_ENV}"

      - name: Release Eden
        uses: softprops/action-gh-release@v2.2.2
        with:
          name: 'Eden Unofficial Nightly Release: ${{ env.COUNT }}'
          tag_name: '${{ env.TAG }}'
          body: '${{ env.BODY }}'
          prerelease: false
          draft: false
          generate_release_notes: false
          fail_on_unmatched_files: false
          make_latest: true
          files: |
            *.AppImage*, *.AppBundle*, *.7z, *.tar.xz, *.exe, *.apk
